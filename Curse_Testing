{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Scraping Wikipedia to prove or disprove A CURSE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook, I'm going to have a go at scraping a Wikipedia table, then cross-referencing it with other Wikipedia articles to get a richer dataset, and then doing some summaries to compare to national statistics.\n",
    "\n",
    "The \"Strictly Curse\" comes up in discussion every Winter, when celebrity contestants on Strictly Come Dancing are always rumoured to be having affairs with their professional partners & then leaving their spouses. I thought it'd be interesting to see if, statistically, there's anything to it."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 1: Get everything I can from the main table"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "en.wikipedia.org/wiki/List_of_Strictly_Come_Dancing_contestants has a list of everyone who's competed on Strictly since it started in 2004. I'm going to use that to get the main list of contestants, then have a look into their own wiki pages (later on) to pull out their marital status(es)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the relevant packages\n",
    "\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the page, then soupify it.\n",
    "\n",
    "page_url = \"https://en.wikipedia.org/wiki/List_of_Strictly_Come_Dancing_contestants\"\n",
    "page = requests.get(page_url)\n",
    "soup = BeautifulSoup(page.content,'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find the right table\n",
    "main_table = soup.find(class_=\"wikitable sortable\")\n",
    "\n",
    "# Get the contestants from that table\n",
    "con_info = main_table.find_all('tr')\n",
    "\n",
    "# Count the contestants\n",
    "num = len(list(con_info))\n",
    "\n",
    "# Set up empty arrays for all the fields\n",
    "con_names=[]\n",
    "con_occupations=[]\n",
    "con_ages =[]\n",
    "con_partners =[]\n",
    "con_series=[]\n",
    "con_dances=[]\n",
    "con_highscore=[]\n",
    "con_lowscore=[]\n",
    "con_avscore=[]\n",
    "con_placings=[]\n",
    "\n",
    "# Populate the info fields using the \"td\" tags\n",
    "for i in range(1,num):\n",
    "    con_names.append(con_info[i].find_all(\"td\")[0].get_text().rstrip('\\n'))\n",
    "    con_occupations.append(con_info[i].find_all(\"td\")[1].get_text().rstrip('\\n'))\n",
    "    con_ages.append(con_info[i].find_all(\"td\")[2].get_text().rstrip('\\n'))\n",
    "    con_partners.append(con_info[i].find_all(\"td\")[3].get_text().rstrip('\\n'))\n",
    "    con_series.append(con_info[i].find_all(\"td\")[4].get_text().rstrip('\\n'))\n",
    "    con_dances.append(con_info[i].find_all(\"td\")[6].get_text().rstrip('\\n'))\n",
    "    con_highscore.append(con_info[i].find_all(\"td\")[7].get_text().rstrip('\\n'))\n",
    "    con_lowscore.append(con_info[i].find_all(\"td\")[8].get_text().rstrip('\\n'))\n",
    "    con_avscore.append(con_info[i].find_all(\"td\")[10].get_text().rstrip('\\n'))\n",
    "    con_placings.append(con_info[i].find_all(\"td\")[5].get_text().rstrip('\\n'))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Combine all those lists into a table\n",
    "allinfo = {'Name':con_names,\n",
    "          'Occupation':con_occupations,\n",
    "          'Age':con_ages,\n",
    "          'Professional':con_partners,\n",
    "          'Series':con_series,\n",
    "          'Number of Dances':con_dances,\n",
    "          'Highest Score':con_highscore,\n",
    "          'Lowest Score':con_lowscore,\n",
    "          'Avg Score':con_avscore,\n",
    "          'PlacingString':con_placings}\n",
    "\n",
    "# Put that table into a dataframe\n",
    "df = pd.DataFrame(allinfo)\n",
    "\n",
    "# Make a copy in case I need to go back and see what it originally was\n",
    "df_Original = df.copy()\n",
    "\n",
    "# Drop the preceeding \"=\" for tied places\n",
    "df['PlacingString']=(df['PlacingString'].str.lstrip(\"=\"))\n",
    "\n",
    "# Convert the placing column to a more machine-readable format\n",
    "df['Placing']=(df['PlacingString'].str.split(\"th\").str[0])\n",
    "df['Placing']=(df['Placing'].str.split(\"nd\").str[0])\n",
    "df['Placing']=(df['Placing'].str.split(\"st\").str[0])\n",
    "df['Placing']=(df['Placing'].str.split(\"rd\").str[0])\n",
    "\n",
    "# Convert to the right datatypes\n",
    "df = df.astype({'Age':'int32','Series':'int32','Number of Dances':'int32','Highest Score':'int32', \\\n",
    "                 'Lowest Score':'int32','Avg Score':'float','Placing':'int32'})\n",
    "\n",
    "# Add a \"year of competition\" column\n",
    "df['Competing Year']= np.where(df['Series']==1,2004,df['Series']+2002)\n",
    "\n",
    "# Get rid of the old Placing column\n",
    "df.drop(['PlacingString'],axis=1,inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 2: Going to individuals' wiki pages to pull cross-info from them "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this, I'm just going to wiki/persons_name, and all the info (as far as I can see) is in the info box down the right hand side. It tends to be there for most of the competitors, so I think there's little enough leakage that I won't go looking any harder for it right now!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [],
   "source": [
    "df2 = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A test function, to make sure everyone has a wiki page that I can get to\n",
    "def HasAWikiPage(name):\n",
    "    # First, get their wiki page up\n",
    "    spaces = name.replace(\" \",\"_\")\n",
    "    wiki_url = \"https://en.wikipedia.org/wiki/\" + spaces\n",
    "    # print(wiki_url)\n",
    "    page = requests.get(wiki_url)\n",
    "    \n",
    "    # If it can't find the page, don't do anything else\n",
    "    if page.status_code != 200:\n",
    "        return(0)\n",
    "    \n",
    "    return(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# A quick test shows that 99% of my contestants have at least a wiki page I can pull up - fab!\n",
    "\n",
    "df_Test=pd.DataFrame(df['Name'],columns=[\"Name\"])\n",
    "df_Test['WikiPage']=df_Test['Name'].apply(lambda x:HasAWikiPage(x))\n",
    "#df_Test.describe()\n",
    "\n",
    "# Although, hilariously, Alex Jones (that's the only one I've spotted, there may be more) is pulling up\n",
    "#   the far-right conspiracy theorist of the same name from the US. Not sure what to do about that one!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GetMarriageStatus(index):\n",
    "    # First, get their wiki page up\n",
    "    their_name = df.iloc[index,0]\n",
    "    # print(their_name + \":\\n\") \n",
    "    wiki_url = \"https://en.wikipedia.org/wiki/\" + their_name.replace(\" \",\"_\")\n",
    "    page = requests.get(wiki_url)\n",
    "    \n",
    "    # If it can't find the page, don't do anything else\n",
    "    if page.status_code != 200:\n",
    "        return(0)\n",
    "    \n",
    "    # Find the \"Spouse(s)\" bit of their bio\n",
    "    soup = BeautifulSoup(page.content,'html.parser')\n",
    "    \n",
    "    try:\n",
    "        infobox = soup.find(class_=\"infobox biography vcard\")\n",
    "    except AttributeError:\n",
    "        return(0)\n",
    "    \n",
    "    #print(infobox.prettify())\n",
    "    \n",
    "    try:\n",
    "        infolines = infobox.find_all(\"tr\")\n",
    "    except AttributeError:\n",
    "        return(0)\n",
    "    \n",
    "    # Put the headings in as a list\n",
    "    stringrows=[]\n",
    "    for i in range(0,len(infolines)):\n",
    "        stringrows.append(infolines[i].get_text())\n",
    "        # Then if we have the \"Spouse\" row, return it\n",
    "        if \"Spouse(s)\" in stringrows[i]:\n",
    "            spousetext = stringrows[i].lstrip(\"Spouse(s)\")\n",
    "            return(spousetext)\n",
    "        \n",
    "    return(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put the spouses info in the new table\n",
    "df2['Spouses String']=(df2.index.map(lambda x:GetMarriageStatus(x)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 3: Processing the data I already have now, to allow me to answer the question I wanted to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Age</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Series</th>\n",
       "      <th>Number of Dances</th>\n",
       "      <th>Highest Score</th>\n",
       "      <th>Lowest Score</th>\n",
       "      <th>Avg Score</th>\n",
       "      <th>Placing</th>\n",
       "      <th>Competing Year</th>\n",
       "      <th>Spouses String</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>David Dickinson</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>63</td>\n",
       "      <td>Camilla Dallerup</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "      <td>2004</td>\n",
       "      <td>Lorne Lesley (b. Irene Spettie,[1] m. 1968)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Verona Joseph</td>\n",
       "      <td>Actress</td>\n",
       "      <td>30</td>\n",
       "      <td>Paul Killick</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>27</td>\n",
       "      <td>24</td>\n",
       "      <td>24.75</td>\n",
       "      <td>6</td>\n",
       "      <td>2004</td>\n",
       "      <td>Farren Blackburn (2004—)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Natasha Kaplinsky</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>31</td>\n",
       "      <td>Brendan Cole</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>37</td>\n",
       "      <td>26</td>\n",
       "      <td>33.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2004</td>\n",
       "      <td>Justin Bower (m. 2005)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Carol Vorderman</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>43</td>\n",
       "      <td>Paul Killick</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>21.00</td>\n",
       "      <td>9</td>\n",
       "      <td>2004</td>\n",
       "      <td>Christopher Mather(1985–86; divorced)Patrick K...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Esther Rantzen</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>64</td>\n",
       "      <td>Anton du Beke</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>24</td>\n",
       "      <td>16</td>\n",
       "      <td>18.66</td>\n",
       "      <td>8</td>\n",
       "      <td>2004</td>\n",
       "      <td>Desmond Wilcox(m. 1977; died 2000)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Name    Occupation  Age      Professional  Series  \\\n",
       "1     David Dickinson  TV presenter   63  Camilla Dallerup       1   \n",
       "2       Verona Joseph       Actress   30      Paul Killick       1   \n",
       "7   Natasha Kaplinsky  TV presenter   31      Brendan Cole       1   \n",
       "9     Carol Vorderman  TV presenter   43      Paul Killick       2   \n",
       "10     Esther Rantzen  TV presenter   64     Anton du Beke       2   \n",
       "\n",
       "    Number of Dances  Highest Score  Lowest Score  Avg Score  Placing  \\\n",
       "1                  3             21            16      19.00        7   \n",
       "2                  4             27            24      24.75        6   \n",
       "7                 12             37            26      33.00        1   \n",
       "9                  2             22            20      21.00        9   \n",
       "10                 3             24            16      18.66        8   \n",
       "\n",
       "    Competing Year                                     Spouses String  \n",
       "1             2004        Lorne Lesley (b. Irene Spettie,[1] m. 1968)  \n",
       "2             2004                           Farren Blackburn (2004—)  \n",
       "7             2004                             Justin Bower (m. 2005)  \n",
       "9             2004  Christopher Mather(1985–86; divorced)Patrick K...  \n",
       "10            2004                 Desmond Wilcox(m. 1977; died 2000)  "
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# New dataframe with only the ones with marriage information\n",
    "df3 = df2[df2['Spouses String']!=0]\n",
    "df3.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "# A function to return a tuple of the marriage and divorce years.\n",
    "# Then the odd ones are marriages and the even ones are divorces!\n",
    "\n",
    "def MarDivList(index,whichone):\n",
    "    # Spouse String\n",
    "    ss = df3.iloc[index,11]\n",
    "    \n",
    "    # I'm really looking for either 2-digit or 4-digit numerical sequences\n",
    "    years = []\n",
    "    i=0\n",
    "    while i in range(0,len(ss)-1):\n",
    "        if ss[i:i+2].isnumeric():\n",
    "            if ss[i:i+4].isnumeric():\n",
    "                years.append(int(ss[i:i+4]))\n",
    "                i=i+4\n",
    "            else:\n",
    "                years.append(1900+int(ss[i:i+2]))\n",
    "                i=i+2\n",
    "        i=i+1\n",
    "    \n",
    "    while len(years)<8:\n",
    "        years.append(0)\n",
    "    \n",
    "    return(years[whichone])\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add all the marriage & divorce columns\n",
    "\n",
    "df3 = df3.reset_index(drop=True)\n",
    "df3['First Marriage']=(df3.index.map(lambda x:MarDivList(x,0)))\n",
    "df3['First Divorce']=(df3.index.map(lambda x:MarDivList(x,1)))\n",
    "df3['Second Marriage']=(df3.index.map(lambda x:MarDivList(x,2)))\n",
    "df3['Second Divorce']=(df3.index.map(lambda x:MarDivList(x,3)))\n",
    "df3['Third Marriage']=(df3.index.map(lambda x:MarDivList(x,4)))\n",
    "df3['Third Divorce']=(df3.index.map(lambda x:MarDivList(x,5)))\n",
    "\n",
    "df3['Fourth Marriage']=(df3.index.map(lambda x:MarDivList(x,6)))\n",
    "df3['Fourth Divorce']=(df3.index.map(lambda x:MarDivList(x,7)))\n",
    "\n",
    "# And then lost the string about the spouses\n",
    "df3=df3.drop('Spouses String',axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Age</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Series</th>\n",
       "      <th>Number of Dances</th>\n",
       "      <th>Highest Score</th>\n",
       "      <th>Lowest Score</th>\n",
       "      <th>Avg Score</th>\n",
       "      <th>Placing</th>\n",
       "      <th>Competing Year</th>\n",
       "      <th>First Marriage</th>\n",
       "      <th>First Divorce</th>\n",
       "      <th>Second Marriage</th>\n",
       "      <th>Second Divorce</th>\n",
       "      <th>Third Marriage</th>\n",
       "      <th>Third Divorce</th>\n",
       "      <th>Fourth Marriage</th>\n",
       "      <th>Fourth Divorce</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>David Dickinson</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>63</td>\n",
       "      <td>Camilla Dallerup</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "      <td>2004</td>\n",
       "      <td>1968</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Verona Joseph</td>\n",
       "      <td>Actress</td>\n",
       "      <td>30</td>\n",
       "      <td>Paul Killick</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>27</td>\n",
       "      <td>24</td>\n",
       "      <td>24.75</td>\n",
       "      <td>6</td>\n",
       "      <td>2004</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Natasha Kaplinsky</td>\n",
       "      <td>TV presenter</td>\n",
       "      <td>31</td>\n",
       "      <td>Brendan Cole</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>37</td>\n",
       "      <td>26</td>\n",
       "      <td>33.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2004</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Name    Occupation  Age      Professional  Series  \\\n",
       "0    David Dickinson  TV presenter   63  Camilla Dallerup       1   \n",
       "1      Verona Joseph       Actress   30      Paul Killick       1   \n",
       "2  Natasha Kaplinsky  TV presenter   31      Brendan Cole       1   \n",
       "\n",
       "   Number of Dances  Highest Score  Lowest Score  Avg Score  Placing  \\\n",
       "0                 3             21            16      19.00        7   \n",
       "1                 4             27            24      24.75        6   \n",
       "2                12             37            26      33.00        1   \n",
       "\n",
       "   Competing Year  First Marriage  First Divorce  Second Marriage  \\\n",
       "0            2004            1968              0                0   \n",
       "1            2004            2004              0                0   \n",
       "2            2004            2005              0                0   \n",
       "\n",
       "   Second Divorce  Third Marriage  Third Divorce  Fourth Marriage  \\\n",
       "0               0               0              0                0   \n",
       "1               0               0              0                0   \n",
       "2               0               0              0                0   \n",
       "\n",
       "   Fourth Divorce  \n",
       "0               0  \n",
       "1               0  \n",
       "2               0  "
      ]
     },
     "execution_count": 289,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 4: Dropping the people outside of our time ranges\n",
    "I don't need the information about people who were already divorced, or weren't yet married at the time of their competition - so get rid!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4=df3.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Avg Score</th>\n",
       "      <th>Competing Year</th>\n",
       "      <th>First Marriage</th>\n",
       "      <th>First Divorce</th>\n",
       "      <th>Second Marriage</th>\n",
       "      <th>Second Divorce</th>\n",
       "      <th>Third Marriage</th>\n",
       "      <th>Third Divorce</th>\n",
       "      <th>Fourth Marriage</th>\n",
       "      <th>Fourth Divorce</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>David Dickinson</td>\n",
       "      <td>Camilla Dallerup</td>\n",
       "      <td>19.00</td>\n",
       "      <td>2004</td>\n",
       "      <td>1968</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Verona Joseph</td>\n",
       "      <td>Paul Killick</td>\n",
       "      <td>24.75</td>\n",
       "      <td>2004</td>\n",
       "      <td>2004</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Natasha Kaplinsky</td>\n",
       "      <td>Brendan Cole</td>\n",
       "      <td>33.00</td>\n",
       "      <td>2004</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Name      Professional  Avg Score  Competing Year  \\\n",
       "0    David Dickinson  Camilla Dallerup      19.00            2004   \n",
       "1      Verona Joseph      Paul Killick      24.75            2004   \n",
       "2  Natasha Kaplinsky      Brendan Cole      33.00            2004   \n",
       "\n",
       "   First Marriage  First Divorce  Second Marriage  Second Divorce  \\\n",
       "0            1968              0                0               0   \n",
       "1            2004              0                0               0   \n",
       "2            2005              0                0               0   \n",
       "\n",
       "   Third Marriage  Third Divorce  Fourth Marriage  Fourth Divorce  \n",
       "0               0              0                0               0  \n",
       "1               0              0                0               0  \n",
       "2               0              0                0               0  "
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4 = df4.drop(['Occupation','Age','Series','Number of Dances','Placing',\\\n",
    "               'Highest Score','Lowest Score'],axis=1)\n",
    "df4.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "def MarriedAtTheTime(start,end,comp):\n",
    "    if ((comp>=start and comp<=end)or(start != 0 and comp>=start and end==0)):\n",
    "        return(1)\n",
    "    else: return(0)\n",
    "    \n",
    "def WithinXYears(div,comp,x):\n",
    "    if (div != 0 and div-comp <=x and comp<=div):\n",
    "        return(1)\n",
    "    else: return (0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4['Married at the Time']= \\\n",
    "    df4.apply(lambda x: MarriedAtTheTime(x['First Marriage'], x['First Divorce'],x['Competing Year']), axis=1) \\\n",
    "    + df4.apply(lambda x: MarriedAtTheTime(x['Second Marriage'], x['Second Divorce'],x['Competing Year']), axis=1)\\\n",
    "    + df4.apply(lambda x: MarriedAtTheTime(x['Third Marriage'], x['Third Divorce'],x['Competing Year']), axis=1)\\\n",
    "    + df4.apply(lambda x: MarriedAtTheTime(x['Fourth Marriage'], x['Fourth Divorce'],x['Competing Year']), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4['Within 1 Year']= \\\n",
    "    df4.apply(lambda x: WithinXYears(x['First Divorce'], x['Competing Year'],1), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Second Divorce'], x['Competing Year'],1), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Third Divorce'], x['Competing Year'],1), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Fourth Divorce'], x['Competing Year'],1), axis=1) \\\n",
    "\n",
    "df4['Within 2 Years']= \\\n",
    "    df4.apply(lambda x: WithinXYears(x['First Divorce'], x['Competing Year'],2), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Second Divorce'], x['Competing Year'],2), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Third Divorce'], x['Competing Year'],2), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Fourth Divorce'], x['Competing Year'],2), axis=1) \\\n",
    "\n",
    "df4['Within 3 Years']= \\\n",
    "    df4.apply(lambda x: WithinXYears(x['First Divorce'], x['Competing Year'],3), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Second Divorce'], x['Competing Year'],3), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Third Divorce'], x['Competing Year'],3), axis=1) \\\n",
    "    + df4.apply(lambda x: WithinXYears(x['Fourth Divorce'], x['Competing Year'],3), axis=1) \\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg Score</th>\n",
       "      <th>Competing Year</th>\n",
       "      <th>First Marriage</th>\n",
       "      <th>First Divorce</th>\n",
       "      <th>Second Marriage</th>\n",
       "      <th>Second Divorce</th>\n",
       "      <th>Third Marriage</th>\n",
       "      <th>Third Divorce</th>\n",
       "      <th>Fourth Marriage</th>\n",
       "      <th>Fourth Divorce</th>\n",
       "      <th>Married at the Time</th>\n",
       "      <th>Within 1 Year</th>\n",
       "      <th>Within 2 Years</th>\n",
       "      <th>Within 3 Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.0</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>57.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>26.246316</td>\n",
       "      <td>2011.175439</td>\n",
       "      <td>1997.964912</td>\n",
       "      <td>807.473684</td>\n",
       "      <td>526.157895</td>\n",
       "      <td>70.035088</td>\n",
       "      <td>70.263158</td>\n",
       "      <td>70.421053</td>\n",
       "      <td>35.245614</td>\n",
       "      <td>35.263158</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.140351</td>\n",
       "      <td>0.140351</td>\n",
       "      <td>0.140351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.180154</td>\n",
       "      <td>4.480604</td>\n",
       "      <td>14.402337</td>\n",
       "      <td>990.524701</td>\n",
       "      <td>888.277522</td>\n",
       "      <td>370.531759</td>\n",
       "      <td>371.739854</td>\n",
       "      <td>372.576116</td>\n",
       "      <td>266.098551</td>\n",
       "      <td>266.231004</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.350438</td>\n",
       "      <td>0.350438</td>\n",
       "      <td>0.350438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>15.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>1959.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>20.250000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>1989.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>25.800000</td>\n",
       "      <td>2011.000000</td>\n",
       "      <td>2001.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>30.330000</td>\n",
       "      <td>2015.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>1976.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>36.440000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>2019.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Avg Score  Competing Year  First Marriage  First Divorce  \\\n",
       "count  57.000000       57.000000       57.000000      57.000000   \n",
       "mean   26.246316     2011.175439     1997.964912     807.473684   \n",
       "std     6.180154        4.480604       14.402337     990.524701   \n",
       "min    15.000000     2004.000000     1959.000000       0.000000   \n",
       "25%    20.250000     2007.000000     1989.000000       0.000000   \n",
       "50%    25.800000     2011.000000     2001.000000       0.000000   \n",
       "75%    30.330000     2015.000000     2008.000000    2000.000000   \n",
       "max    36.440000     2019.000000     2019.000000    2017.000000   \n",
       "\n",
       "       Second Marriage  Second Divorce  Third Marriage  Third Divorce  \\\n",
       "count        57.000000       57.000000       57.000000      57.000000   \n",
       "mean        526.157895       70.035088       70.263158      70.421053   \n",
       "std         888.277522      370.531759      371.739854     372.576116   \n",
       "min           0.000000        0.000000        0.000000       0.000000   \n",
       "25%           0.000000        0.000000        0.000000       0.000000   \n",
       "50%           0.000000        0.000000        0.000000       0.000000   \n",
       "75%        1976.000000        0.000000        0.000000       0.000000   \n",
       "max        2019.000000     1996.000000     2008.000000    2014.000000   \n",
       "\n",
       "       Fourth Marriage  Fourth Divorce  Married at the Time  Within 1 Year  \\\n",
       "count        57.000000       57.000000                 57.0      57.000000   \n",
       "mean         35.245614       35.263158                  1.0       0.140351   \n",
       "std         266.098551      266.231004                  0.0       0.350438   \n",
       "min           0.000000        0.000000                  1.0       0.000000   \n",
       "25%           0.000000        0.000000                  1.0       0.000000   \n",
       "50%           0.000000        0.000000                  1.0       0.000000   \n",
       "75%           0.000000        0.000000                  1.0       0.000000   \n",
       "max        2009.000000     2010.000000                  1.0       1.000000   \n",
       "\n",
       "       Within 2 Years  Within 3 Years  \n",
       "count       57.000000       57.000000  \n",
       "mean         0.140351        0.140351  \n",
       "std          0.350438        0.350438  \n",
       "min          0.000000        0.000000  \n",
       "25%          0.000000        0.000000  \n",
       "50%          0.000000        0.000000  \n",
       "75%          0.000000        0.000000  \n",
       "max          1.000000        1.000000  "
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testingdf = df4[df4['Married at the Time']==1]\n",
    "testingdf.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Professional</th>\n",
       "      <th>Avg Score</th>\n",
       "      <th>Competing Year</th>\n",
       "      <th>First Marriage</th>\n",
       "      <th>First Divorce</th>\n",
       "      <th>Second Marriage</th>\n",
       "      <th>Second Divorce</th>\n",
       "      <th>Third Marriage</th>\n",
       "      <th>Third Divorce</th>\n",
       "      <th>Fourth Marriage</th>\n",
       "      <th>Fourth Divorce</th>\n",
       "      <th>Married at the Time</th>\n",
       "      <th>Within 1 Year</th>\n",
       "      <th>Within 2 Years</th>\n",
       "      <th>Within 3 Years</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Letitia Dean</td>\n",
       "      <td>Darren Bennett</td>\n",
       "      <td>29.45</td>\n",
       "      <td>2007</td>\n",
       "      <td>2002</td>\n",
       "      <td>2007</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Jimi Mistry</td>\n",
       "      <td>Flavia Cacace</td>\n",
       "      <td>28.33</td>\n",
       "      <td>2010</td>\n",
       "      <td>2001</td>\n",
       "      <td>2010</td>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Patsy Kensit</td>\n",
       "      <td>Robin Windsor</td>\n",
       "      <td>28.00</td>\n",
       "      <td>2010</td>\n",
       "      <td>1988</td>\n",
       "      <td>1991</td>\n",
       "      <td>1992</td>\n",
       "      <td>1996</td>\n",
       "      <td>1997</td>\n",
       "      <td>2000</td>\n",
       "      <td>2009</td>\n",
       "      <td>2010</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>Denise van Outen</td>\n",
       "      <td>James Jordan</td>\n",
       "      <td>35.13</td>\n",
       "      <td>2012</td>\n",
       "      <td>2009</td>\n",
       "      <td>2013</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>Rachel Riley</td>\n",
       "      <td>Pasha Kovalev</td>\n",
       "      <td>25.33</td>\n",
       "      <td>2013</td>\n",
       "      <td>2012</td>\n",
       "      <td>2013</td>\n",
       "      <td>2019</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>Kirsty Gallacher</td>\n",
       "      <td>Brendan Cole</td>\n",
       "      <td>21.67</td>\n",
       "      <td>2015</td>\n",
       "      <td>2010</td>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>74</th>\n",
       "      <td>Helen George</td>\n",
       "      <td>Aljaž Skorjanec</td>\n",
       "      <td>33.00</td>\n",
       "      <td>2015</td>\n",
       "      <td>2011</td>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79</th>\n",
       "      <td>Louise Redknapp</td>\n",
       "      <td>Kevin Clifton</td>\n",
       "      <td>35.88</td>\n",
       "      <td>2016</td>\n",
       "      <td>1998</td>\n",
       "      <td>2017</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Name     Professional  Avg Score  Competing Year  \\\n",
       "22      Letitia Dean   Darren Bennett      29.45            2007   \n",
       "39       Jimi Mistry    Flavia Cacace      28.33            2010   \n",
       "41      Patsy Kensit    Robin Windsor      28.00            2010   \n",
       "53  Denise van Outen     James Jordan      35.13            2012   \n",
       "57      Rachel Riley    Pasha Kovalev      25.33            2013   \n",
       "71  Kirsty Gallacher     Brendan Cole      21.67            2015   \n",
       "74      Helen George  Aljaž Skorjanec      33.00            2015   \n",
       "79   Louise Redknapp    Kevin Clifton      35.88            2016   \n",
       "\n",
       "    First Marriage  First Divorce  Second Marriage  Second Divorce  \\\n",
       "22            2002           2007                0               0   \n",
       "39            2001           2010             2013               0   \n",
       "41            1988           1991             1992            1996   \n",
       "53            2009           2013                0               0   \n",
       "57            2012           2013             2019               0   \n",
       "71            2010           2015                0               0   \n",
       "74            2011           2015                0               0   \n",
       "79            1998           2017                0               0   \n",
       "\n",
       "    Third Marriage  Third Divorce  Fourth Marriage  Fourth Divorce  \\\n",
       "22               0              0                0               0   \n",
       "39               0              0                0               0   \n",
       "41            1997           2000             2009            2010   \n",
       "53               0              0                0               0   \n",
       "57               0              0                0               0   \n",
       "71               0              0                0               0   \n",
       "74               0              0                0               0   \n",
       "79               0              0                0               0   \n",
       "\n",
       "    Married at the Time  Within 1 Year  Within 2 Years  Within 3 Years  \n",
       "22                    1              1               1               1  \n",
       "39                    1              1               1               1  \n",
       "41                    1              1               1               1  \n",
       "53                    1              1               1               1  \n",
       "57                    1              1               1               1  \n",
       "71                    1              1               1               1  \n",
       "74                    1              1               1               1  \n",
       "79                    1              1               1               1  "
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4[df4['Within 1 Year']!=0].head(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Section 6: Getting figures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"In England and Wales in 2017, only 8.4 per 1,000 opposite-sex couples got divorced.\"*\n",
    "I'm going to use this figure for now because I can't see any better ones for more recent years.\n",
    "\n",
    "*https://www.theguardian.com/lifeandstyle/2018/dec/09/in-it-for-the-long-haul-why-divorce-rates-are-falling-fast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Divorce rate in England and Wales on average\n",
    "ew_rate = 8.4/1000\n",
    "ew_percent=str(round(ew_rate*100,2))+\"%\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Divorce rate among married-at-the-time Strictly contestants\n",
    "\n",
    "scd_rate = df4['Within 1 Year'].sum()/df4['Married at the Time'].sum()\n",
    "scd_percent=str(round(scd_rate*100,2))+\"%\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "England and Wales divorce percentage in a year: 0.84%\n",
      "Strictly Come Dancing divorce percentage in a year: 14.04%\n"
     ]
    }
   ],
   "source": [
    "print(\"England and Wales divorce percentage in a year: \" + ew_percent)\n",
    "print(\"Strictly Come Dancing divorce percentage in a year: \" + scd_percent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of times higher Strictly is than normal people: 16.71\n"
     ]
    }
   ],
   "source": [
    "print(\"Number of times higher Strictly is than normal people: \" + str(round(scd_rate/ew_rate,2)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I want to say I've gone wrong somewhere and it's not NEARLY 17 times higher?? But it feels like it might be..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Statistical Significant Test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I'm going for a 1-sample test (classic) just to test whether the sample we've picked could possibly have come from a population with a mean of 0.84%, as the ONS published. To be honest, I suspect I haven't got enough datapoints to make them statistically significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using a 1-sample mean test\n",
    "# http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/SAS/SAS4-OneSampleTtest/SAS4-OneSampleTtest6.html\n",
    "\n",
    "# Isolate the already married ones\n",
    "dfX = df4[df4['Married at the Time']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample mean: 0.14035087719298245\n",
      "Sample variance: 0.5919783121240432\n"
     ]
    }
   ],
   "source": [
    "sample_mean = dfX['Within 1 Year'].mean()\n",
    "sample_std_dev = (dfX['Within 1 Year'].std())\n",
    "sample_variance = math.sqrt(sample_std_dev)\n",
    "\n",
    "print(\"Sample mean: \"+str(sample_mean))\n",
    "print(\"Sample variance: \"+str(math.sqrt(sample_std_dev)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "sample_statistic = (sample_mean-ew_rate)/(sample_variance/math.sqrt(57))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"Then reject the null if the sample statistic is more than 1.96 or less than -1.96.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.6828442123518463\n"
     ]
    }
   ],
   "source": [
    "print(sample_statistic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our sample statistic is inside the range -- I think I need more data!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Next Steps:\n",
    "First, I'd like to make a few graphics and things to show this.\n",
    "\n",
    "I'd like to look at other celebrities, and see if their rates are higher too (to check that it's the \"Strictly Curse\", rather than just the \"Fame Curse\".)\n",
    "\n",
    "Finally, I think I could read more data in (I've only got 53 people by the end who were married at the time of competing) from other DWTS competitions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
